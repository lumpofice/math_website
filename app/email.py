from flask_mail import Message
from app import mail
from threading import Thread
from flask import current_app


def send_async_email(app, msg):
    '''Flask pushes an application context automatically, but by starting a
custom thread---in the send_email function---we may be facing a situation in
which the application requires that we push a manual context. Failing to do so,
we may be attempting to access the application instance, via the current_app
variable, from outside of the context automatically generated by the
application. So, we manually push our own app_context and make requests of the
application instance, via the current_app variable, from within, given that the
mail.send() method can only access the configuration values for the email server
by knowing what the application is; accessing an instance of it through the
current_app variable.'''
    
    
    with app.app_context():
        mail.send(msg)


def send_email(subject, sender, recipients, text_body, html_body):
    '''This method serves as the template for the email we send the user. The
msg variable calls the Message class from the flask_mail module and populates
it with the subject, sender, and recipients. From there, we assign the body and
html attributes to the .txt and .html files that make up the body of our
message.'''
    
    
    msg = Message(subject, sender=sender, recipients=recipients)
    msg.body = text_body
    msg.html = html_body
    Thread(target=send_async_email,
           args=(current_app._get_current_object(), msg)).start()