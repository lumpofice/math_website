The goal is to scale the application. Keeping all of the code in a single script could lead to problems. So, we restructure everything to accomodate our scaling attempts. In (1) below, our root folder will be labeled math_website, and the structure will follow what is set up for the math_website application:

(1)-----------------------------------------------------------------
|-math_website/
  |-config.py
  |-requirements.txt
  |-.flaskenv
  |-app.db
  |-babel.cfg
  |-math_website.py
  |-tests.py
  |-app/
    |-__init__.py
    |-models.py
    |-email.py
    |-cli.py
    |-templates/
      |-base.html
      |-index.html
      |-user.html
      |-precalculus.html
      |-edit_profile.html
      |-# ...
      |-errors/
        |-404.html
        |-500.html
      |-email/
        |-reset_password.html
        |-reset_password.txt
      |-auth/
        |-login.html
        |-register.html
        |-reset_password.html
        |-reset_password_request.html
    |-static/images
    |-translations/
    |-main/
      |-__init__.py
      |-routes.py
      |-forms.py
      |-# ...
    |-errors/
      |-__init__.py
      |-handlers.py
    |-auth/
      |-__init__.py
      |-routes.py
      |-forms.py
      |-email.py
    |-logs
  |-learning_resources
  |-logs
  |-migrations/
  |-venv/
--------------------------------------------------------------------

Our first move is to separate the configuration from the single-script application, as such a setup does not allow us to make changes, dynamically, to our configuration, since the application is defined globally. So, we create a factory function, create_app, that can be imported into a script, say for testing, in which changes to the configuration, say the database we wish to use, can be made. In (2)---a configuration setup not present within the math_website application, though it does serve to communicate the import of separate databases for different modalities---the change in configuration settings accomodates the different modes of operation we may find ourselves within during the construction of the website.

(2)-----------------------------------------------------------------
import os
basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'just guess'
    SQLALCHEMY_COMMIT_ON_TEARDOWN = True
    HRLLO_MAIL_SUBJECT_PREFIX = '[Hrllo]'
    HRLLO_MAIL_SENDER = 'Hrllo Admin <emailhandle@gmail.com>'
    HRLLO_ADMIN = os.environ.get('HRLLO_ADMIN')
    
    @staticmethod
    def init_app(app):
        pass
    
class DevelopmentConfig(Config):
    DEBUG = True
    MAIL_SERVER = 'smtp.googlemail.com'
    MAIL_PORT = 587
    MAIL_USE_TLS = True
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL')\
                              or 'sqlite:///' + os.path.join(
                                  basedir,
                                  'data-dev.sqlite')

class TestingConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL')\ 
                              or 'sqlite:///' + os.path.join(
                                  basedir,
                                  'data-test.sqlite')

class ProductionConfig(Config):
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
                              'sqlite:///' + os.path.join(
                                  basedir,
                                  'data.sqlite')
    
config = {
    'development': DevelopmentConfig,
    'testing': TestingConfig,
    'production': ProductionConfig,
    
    'default': DevelopmentConfig
}
--------------------------------------------------------------------

The Config class is passed to each of the other configuration classes, as it contains all the information each of the modes our application will need during its construction. There is a Testing, Development, and Production configuration for the application, each of which holding its own database.

For multiple reasons, there are Blueprints that need to be set up at this point.
