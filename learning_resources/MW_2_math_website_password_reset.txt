We have a few files that handle the functionality for password reset via email. We begin with a request from the user. In (2), which outlines the reset_password_request function within the routes file, (1), located in the auth directory of the app, the user makes such a request:

(1)----------------------------------------------------------------
|-math_website/
  |-config.py
  |-requirements.txt
  |-.flaskenv
  |-app.db
  |-babel.cfg
  |-math_website.py
  |-tests.py
  |-app/
    |-__init__.py
    |-models.py
    |-email.py
    |-cli.py
    |-templates/
      |-base.html
      |-index.html
      |-user.html
      |-precalculus.html
      |-edit_profile.html
      |-# ...
      |-errors/
        |-404.html
        |-500.html
      |-email/
        |-reset_password.html
        |-reset_password.txt
      |-auth/
        |-login.html
        |-register.html
        |-reset_password.html
        |-reset_password_request.html
    |-static/images
    |-translations/
    |-main/
      |-__init__.py
      |-routes.py
      |-forms.py
      |-# ...
    |-errors/
      |-__init__.py
      |-handlers.py
    |-auth/
      |-__init__.py
      |-routes.py
      |-forms.py
      |-email.py
    |-logs
  |-learning_resources
  |-logs
  |-migrations/
  |-venv/
-------------------------------------------------------------------

(2)----------------------------------------------------------------
# ...
from flask_login import current_user
from app.auth.forms import ResetPasswordRequestForm()
from app.auth.email import send_password_reset_email
# ...

# ...


@bp.route('/reset_password_request', methods=['GET', 'POST'])
def reset_password_request():
    '''This function sends out the email used to prompt the user towards a
password reset.'''
    
    
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    
    form = ResetPasswordRequestForm()
    
    
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        
        
        if user:
            send_password_reset_email(user)
            
            
        flash('An instructional email has been sent.')
        return redirect(url_for('auth.login'))
    
    
    return render_template('auth/reset_password_request.html',
        title='Math Website', form=form)
-------------------------------------------------------------------

The user is located via their email addresse and passed to the send_password_reset_email function in the app.auth.email.py file, (3).

(3)----------------------------------------------------------------
from flask import current_app
from app.email import send_email


def send_password_reset_email(user):
    '''This function generates a token that will be sent to the user via email,
once the ResetPasswordRequestForm has been validated.'''
    
    
    token = user.get_reset_password_token()
    
    
    send_email('[Math Website] Reset Your Password',
        sender=current_app.config['ADMINS'][0],
        recipients=[user.email],
        text_body=render_template('email/reset_password.txt',
            user=user, token=token),
        html_body=render_template('email/reset_password.html',
            user=user, token=token)
        )
-------------------------------------------------------------------

The get_reset_password_token method, (4), is located in the app.models.py file within the User class model. The send_email function, which we have populated with specific arugments, comes from the app.email.py file imported in the preamble of (3). The sender is the value pulled from the ADMINS variable of the configuration file, and the recipient is the user's email address, which is pulled from the user variable---instantiated in (2)---passed to the send_password_reset_email function in (3).

(4)----------------------------------------------------------------
# ...

class User(UserMixin, db.Model):

# ...

    def get_reset_password_token(self, expires_in=600):
        '''This method uses the JSON Web Tokens module to generate a web token
    to be embedded within the password reset link provided within the
    password reset email sent at the request of the user.'''
        
        
        return jwt.encode(
            {'reset_password': self.id, 'exp': time() + expires_in},
            current_app.config['SECRET_KEY'], algorithm='HS256'
            )
-------------------------------------------------------------------

The encoding takes in the value of User.id for the user making the request, setting it as a value to the reset_password key within the encoding dictionary. When the user clicks on the link within the email, the token decoding process takes place in the verify_reset_password_token method, (5), of the app.models.py file. If the decode is successful, the same User.id of the user is generated and passed to the user variable within the reset_password function, (6), of the app.auth.routes.py file, where it is used in a conditional statement to determine whether or not a password reset form will be granted. 

(5)----------------------------------------------------------------
# ...

class User(UserMixin, db.Model):

# ...

    @staticmethod
    def verify_reset_password_token(token):
        '''This method attempts to decode the JSON Web Token, before passing
    the result/value of that attempt to the User object,
    via the User.verify_reset_password_token function call within the
    reset_password method of the routes.py file, with which the reset_password
    method determines, via a Boolean value, whether to keep you in the
    reset_password view or to redirect you to the index view.'''
        
        
        try:
            id = jwt.decode(token, current_app.config['SECRET_KEY'],
                algorithms=['HS256'])['reset_password']
        except:
            return
        return User.query.get(id)
-------------------------------------------------------------------

(6)----------------------------------------------------------------
# ...
from flask_login import current_user
from app.auth.forms import ResetPasswordForm()
# ...

# ...


@bp.route('/reset_password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    '''Upon clicking the link within the password reset request email, we are
redirected to the "reset_password" template, with the url_for call carrying
the link-embedded token with us, assuming the
"User.verify_reset_password_token(token)" value is True. If the value is
instead False, then we are redirected to the "index" template.'''
    
    
    if current_user.is_authenticated:
        return redirect(url_for('main.index'))
    
    
    user = User.verify_reset_password_token(token)
    
    
    if not user:
        '''This conditional brings us back to the index view if our token is
    not verified.'''
        
        
        return redirect(url_for('main.index'))
    
    
    form = ResetPasswordForm()
    
    
    if form.validate_on_submit():
        user.set_password(form.password.data)
        db.session.commit()
        flash('Your password has been reset.')
        return redirect(url_for('auth.login'))
    
    
    return render_template('auth/reset_password.html', form=form)

-------------------------------------------------------------------
