Users will experience three different phases of being logged into the application:

1) The user is not logged in. In this phase, users will be denied access to those view functions that require the user be logged in. Managing the login status of a user will be charged to the LoginManager class imported by the flask_login module, as seen in (1), and the barrier to access is governed by the login_required decorator, an example of which can be seen in (2).

2) The user logs into the application via the LoginForm displayed via the login view function. In (3), (4), and (5), we see how the login view function, the LoginForm, and the User model, respectively, interact to keep anonymous users out of login_required views and escort those users who are logged in from one view to another within the application.  

3) The user is logged in and is recognized by the application via the user_loader decorator as the user moves from one view to the next.

(1)----------------------------------------------------------------
# ...

# ...
from flask_login import LoginManager # keeps track of the user's logged-in state
from flask_babel import lazy_gettext as _1


db = SQLAlchemy()
migrate = Migrate()
login = LoginManager()
login.login_view = 'auth.login'
login.login_message = _1('Please log in to access this page.')

# ...
-------------------------------------------------------------------

(2)----------------------------------------------------------------
# ...

@bp.route('/precalculus')
@login_required
def precalculus():
    '''This is the page on which I am keeping score of the success students
are meeting in my course. The @login_required decorator from
Flask-Login sets accessibility restrictions to only those users who are logged
in.'''
    
    
    return render_template('precalculus.html', title='Math Website')

# ...
------------------------------------------------------------------- 

We assign LoginManager to login, which serves as the parent call to the user_loader decorator in (5).

(3)----------------------------------------------------------------
# ...

# ...
from flask_login import current_user, login_user, logout_user
from werkzeug.urls import url_parse

'''importing objects, methods, and scripts from the application'''
from app import db
from app.auth import bp
from app.auth.forms import *
from app.models import User
# ...

@bp.route('/login', methods=['GET', 'POST'])
def login():
    '''This is the login page, to which anonymous users will be directed,
while nonanonymous users will see, in place of the "login" link in the header,
a link in the header allowing them to "logout" of the site.'''
    
    
    if current_user.is_authenticated:
        '''The "current_user" variable can take on the "id" provided by the
    "load_user" function written into the "models.py" script, if such an "id"
    already exists. This "id" comes from the session. If such "id" does exist,
    its value indicates that the user is non-anonymous (is logged in),
    and then this if statement returns True to redirect the user to the index
    page. However, in the event that this if statement returns False, this
    python script proceeds to load the login form webpage.'''
        
        
        return redirect(url_for('main.index'))
    
    
    form = LoginForm()
    
    
    if form.validate_on_submit():
        '''This if statement checks that the form is valid on submission.
    The lines below query the database for the username, grabbing
    the first entry with that username. The User model sets a unique
    qualification for this field. Thus, there is no chance of us drawing the
    wrong account through this query.'''
        
        
        user = User.query.filter_by(username=form.username.data).first()
        '''This variable takes on the username input to the login form by
    the user. Given that username is a unique field in the User model, we
    conclude our query at the first encountered match.'''
        
        
        if user is None or not user.check_password(form.password.data):
            '''If the username is not already within the database,
        or if the password input to the login form does not return
        the password hash that has been stored to the database for the specific
        username input into the same login form, then this if statement will
        reload the login form page, with all data entry positions blank,
        flashing a notice to the user that the credentials input are
        incorrect. However, if the user exists and the password checks out,
        then the script moves on to log in the user.'''
            
            
            flash('Invalid username or password')
            return redirect(url_for('auth.login'))
        
        
        login_user(user, remember=form.remember_me.data)
        '''Once the user's credentials authenticate, this function logs user into
    the application.'''
        
        
        next_page = request.args.get('next')
        '''This request.args.get() call takes in the parsed contents of a URL
    query string, which is the part of the URL after the question mark.
    That appearing after the question mark within the following, 
    generically-formatted URL displays what we observe when anonymous users
    attempt to view a page protected by the @login_required decorator. 
    
    <scheme>://<netloc>/<path>;<params>?next=<URL>
    
    The parsed contents of the query string---in this example, that string is
    limited to "next=<URL>"---are keys in a Python dictionary.
    The value of this "next" key is the webpage the user wishes to access yet
    cannot due to the fact that they have not yet logged in. Thus,
    the anonymous user is redirected to the login form page upon clicking
    a link within the application that requires users be logged in before
    accessing. The link that the user has clicked is stored as the
    value for this "next" key, and it is accessed once the user has
    successfully logged in.'''
        
        
        if not next_page or url_parse(next_page).netloc != '':
            '''This if statement checks whether the variable next_page has a
        value of True or if the url_parse(next_page) is a relative URL using
        the .netloc method. If url_parse(next_page) is a relative path, then
        it has no hostname. With no hostname, we return to the index page of
        the application.'''
            
            
            next_page = url_for('main.index')
            
            
        return redirect(next_page)
    
    
    return render_template('auth/login.html', title='Math Website',\
        form=form)

# ...
-------------------------------------------------------------------  

The check_password method comes from the models script---(5), below---the password argument for which being the form.password.data argument passed to the check_password call in (3) above. In (4) below, we see the LoginForm presented to the user who wishes to log in. In (5), the UserMixin class is inherited by the LoginForm class to help implement the get_id method, which is used to pass the unique id to the user_loader decorator.

(4)----------------------------------------------------------------
# ...

class LoginForm(FlaskForm):
    '''The login form encountered upon opening the website.'''
    
    
    username = StringField(_1('Username'), validators=[DataRequired()])
    password = PasswordField(_1('Password'), validators=[DataRequired()])
    remember_me = BooleanField(_1('Remember Me'))
    submit = SubmitField(_1('Sign In'))

# ...
-------------------------------------------------------------------

(5)----------------------------------------------------------------
# ...

# ...
from app import db, login
from flask import current_app

# ...
from werkzeug.security import generate_password_hash, check_password_hash
from flask_login import UserMixin

# ...

class User(UserMixin, db.Model):
# ...
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), index=True, unique=True)
    email = db.Column(db.String(120), index=True, unique=True)
    password_hash = db.Column(db.String(128))
# ...
    def check_password(self, password):
        '''This function passes the generated password hash, which was stored
    for the user at the time of registration,
    checking it with the password input by the user within the appropriate
    position of the LoginForm. Meaning, the password input by the user at the
    time of login is compared with the password hash generated by this User
    model at the time of registration.'''
        
        
        return check_password_hash(self.password_hash, password)
# ...
@login.user_loader
def load_user(id):
    '''This function takes the string representation of the unique user
identifier, stored in a user session storage space alotted by Flask, converts
that representation to an integer representation, then passes that integer
to the database for querying.'''
    
    
    return User.query.get(int(id))
# ...

# ...
------------------------------------------------------------------- 
